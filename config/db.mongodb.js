import express from "express";
import bodyParser from "body-parser";
import { MongoClient } from "mongodb";
import mongoose from "mongoose";
import dotenv from "dotenv";
import multer from "multer";
import path from "path";
import { dirname } from "path";
import { fileURLToPath } from "url";
import {upload, storage, fileFilter } from "../middlewares/authMiddleware.js"




dotenv.config();

const router = express.Router();
const app = express();

//------------------- DEFINIR EJS COMME MOTEUR DE RENDU-----------------------



const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));


router.use(bodyParser.urlencoded({extended: true}));
router.use(express.json());  // ‚úÖ Pour les requ√™tes JSON

router.use(express.static("Public"));

//-----------------CONNEXTION A MONGOOSE ET CREATION BDD----------------------

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI,);

    console.log(`üü¢ MongoDB connect√© : ${conn.connection.host}`);
  } catch (error) {
    console.error(`‚ùå Erreur de connexion √† MongoDB : ${error.message}`);
    process.exit(1);
  }
};



mongoose.connection.on("error", (err) => {
  console.error("‚ùå Erreur de connexion MongoDB :", err);
});
mongoose.connection.once("open", () => {
  console.log("‚úÖ Connexion MongoDB √©tablie !");
});




//----------------------CREATION SCHEMA----------------------------------------

const servicesSchema = new mongoose.Schema ({
  Titre:{ type: String, required: true },
  Description: { type: String, required: true },
  Image: { type: String,required: true}, // URL de l‚Äôimage
});

//------------------------CREATION MODEL--------------------------------------

const Service = mongoose.model("Service", servicesSchema);

//-------------------------CREATION DOCUMENTS----------------------------------

const service1 = new Service ({
  Titre: "RESTAURATION",
  Description: "La restauration d'un zoo modernise ses installations pour am√©liorer le bien-√™tre des animaux et enrichir l'exp√©rience des visiteurs. Ce projet comprend la r√©novation des enclos, l'int√©gration de technologies √©cologiques, et le d√©veloppement de programmes √©ducatifs sur la conservation. L'objectif est de cr√©er un environnement adapt√© aux besoins des animaux tout en sensibilisant le public √† la pr√©servation de la biodiversit√©.",
  Image: "http://localhost:3000/Public/Assets/Service - Restaurant - image 1.jpg"
});

const service2 = new Service ({
  Titre: "Visite Habitat Avec guide",
  Description: "Une visite guid√©e d'un zoo permet de d√©couvrir les animaux et leurs habitats gr√¢ce aux explications d'un expert. Le guide offre des informations int√©ressantes sur les esp√®ces et les efforts de conservation, tout en r√©pondant aux questions des visiteurs. Cette approche enrichissante rend la visite plus interactive et instructive.",
  Image: "http://localhost:3000/Public/Assets/Serivce - Visite guide.jpg"
});

const service3 = new Service ({
  Titre: "Visite du zoo en petit train",
  Description: "Bienvenue √† bord du petit train du zoo ! Au cours de cette visite, vous aurez l'occasion de d√©couvrir plusieurs esp√®ces animales fascinantes tout en profitant d'une promenade agr√©able. Vous traverserez diff√©rents enclos et zones du parc, tout en apprenant des faits int√©ressants sur la faune et les efforts de conservation du zoo. Installez-vous temporairement et laissez-vous guider √† travers ce voyage au c≈ìur de la nature.",
  Image: "http://localhost:3000/Public/Assets/Service - Visite train.jpg"
});


//----LES RANGER DANS UN TABLEAU ARRAY----

const defaultServices = [service1, service2, service3];

/*
const listSchema = {
  name: String,
  services: [servicesSchema]
}
const List = mongoose.model("List", listSchema);*/


//------------------------------ GET ROUTE---------------------------------


router.get("/service2", async (req, res) => {
  console.log("üü¢ Route '/services' appel√©e !");

    try {
        // RECHERCHE TOUS LES √âL√âMENTS DANS LA COLLECTION
        const foundServices = await Service.find({});
        console.log("Services r√©cup√©r√©s :", foundServices);

  
        // SI LA COLLECTION EST VIDE, INS√àRE LES √âL√âMENTS PAR D√âFAUT
        if (foundServices.length === 0) {
          console.log("La collection est vide, on va ins√©rer les services par d√©faut.");

          console.log("‚úÖ Services ajout√©s.");
          
          const checkServices = await Service.find({});
          console.log("V√©rification apr√®s insertion :", checkServices);  // V√©rifie que les services sont bien enregistr√©s

            //INSERT MANY
            await Service.insertMany(defaultServices);
            console.log("‚úÖ √âl√©ments par d√©faut enregistr√©s avec succ√®s dans la base de donn√©es.");
            res.redirect("/service2"); // REDIRIGE VERS LA PAGE SERVICE APR√àS L'INSERTION
            
        } else {

            // SI LA COLLECTION N'EST PAS VIDE, AFFICHE LES √âL√âMENTS
            console.log("Nombre de services trouv√©s :", foundServices.length);
            console.log("Services trouv√©s :", foundServices);
            res.render("service.ejs", { listTitle: "Services", newListServices: foundServices});
        }
    } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des √©l√©ments ou de l'insertion :", err);
        res.status(500).send("Erreur interne du serveur");
    }
  });
  
  
  //----------------------------------------POST ROUTE---------------------------------
  
          //----------------AJOUT DE NOUVEAU SERVICE ----------------------
          router.post("/service2", upload.single("Image"), async (req, res) => {
            try {
              console.log("Donn√©es re√ßues :", req.body);
              console.log("Fichier re√ßu :", req.file); // V√©rifie si Multer re√ßoit bien le fichier

              if (!req.body.Titre || !req.body.Description || !req.file) {
                return res.status(400).json({ error: "Tous les champs sont obligatoires." });
            }
                // R√âCUP√âRER LE NOM DE L'√âL√âMENT ENVOY√â PAR LE FORMULAIRE
                const serviceTitre = req.body.Titre;
                const serviceDescription = req.body.Description;
                const serviceImage = req.file ? `/uploads/${req.file.filename}` : "";
        

                 // Si Image est un champ obligatoire, pense √† fournir une valeur par d√©faut ou √† renvoyer une erreur personnalis√©e
        if (!serviceImage) {
          throw new Error("Le champ image est obligatoire.");
      }
      
                // CR√âER UN NOUVEL √âL√âMENT AVEC LES DONNEES FOURNI
                const service = new Service({
                  Titre: serviceTitre,
                  Description: serviceDescription,
                  Image: serviceImage
                });
        
                // SAUVEGARDER L'√âL√âMENT DANS LA BASE DE DONN√âES
                await service.save();
        
                // REDIRIGER VERS LA PAGE DE SERVICE APR√àS L'AJOUT
                res.redirect("/service2");
            } catch (err) {
                // G√âRER LES ERREURS ET AFFICHER UN MESSAGE DANS LA CONSOLE
                console.error("‚ùå ERREUR LORS DE L'AJOUT DE L'√âL√âMENT :", err);
                
                // ENVOYER UNE R√âPONSE D'ERREUR AU CLIENT
                res.status(500).send("ERREUR INTERNE DU SERVEUR");
            }
        });
  
        
         //--------------------SUPPRESSION D'ITEM----------------------
  
      router.post("/delete", async (req, res) => {
          try {
              const checkedServiceId = req.body.supprimer;
              
              const deletedService = await Service.findByIdAndDelete(checkedServiceId);
              
              if (deletedService) {
                  console.log("Successfully deleted checked item.");
              } else {
                  console.log("Item not found.");
              }
              
              res.redirect("/service2"); // Rediriger apr√®s suppression
          } catch (err) {
              console.error("Error deleting item:", err);
              res.status(500).send("Internal Server Error");
          }
      });



export { connectDB, router}
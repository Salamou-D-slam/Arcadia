import express from 'express';
import mongoose from 'mongoose';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';


dotenv.config();


const router = express.Router();
const app = express();
const port = 3000;

// On utilise __dirname avec fileURLToPath pour que le code fonctionne avec ES Modules.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);



// Middleware pour servir des fichiers statiques
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.urlencoded({ extended: true })); // Pour g√©rer les donn√©es de formulaires

// Vue moteur EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));






/// Connexion √† MongoDB via la fonction connectDB
const connectDB = async () => {
    try {
      const conn = await mongoose.connect(process.env.MONGO_URI);
      console.log(`üü¢ MongoDB connect√© : ${conn.connection.host}`);
  
      // Ajouter des services par d√©faut si la collection est vide
      const count = await Service.countDocuments({});
      if (count === 0) {
        const servicesParDefaut = [{ 
            title: "RESTAURATION", 
            description: "La restauration d'un zoo modernise ses installations pour am√©liorer le bien-√™tre des animaux et enrichir l'exp√©rience des visiteurs. Ce projet comprend la r√©novation des enclos, l'int√©gration de technologies √©cologiques, et le d√©veloppement de programmes √©ducatifs sur la conservation. L'objectif est de cr√©er un environnement adapt√© aux besoins des animaux tout en sensibilisant le public √† la pr√©servation de la biodiversit√©.", 
            image: "/Assets/Service - Restaurant - image 1.jpg"
        },
          { 
            title:"Visite Habitat Avec guide", 
            description: "Une visite guid√©e d'un zoo permet de d√©couvrir les animaux et leurs habitats gr√¢ce aux explications d'un expert. Le guide offre des informations int√©ressantes sur les esp√®ces et les efforts de conservation, tout en r√©pondant aux questions des visiteurs. Cette approche enrichissante rend la visite plus interactive et instructive.",
            image: "/Assets/Serivce - Visite guide.jpg"
        },
          { 
            title: "Visite du zoo en petit train",
             description: "Bienvenue √† bord du petit train du zoo ! Au cours de cette visite, vous aurez l'occasion de d√©couvrir plusieurs esp√®ces animales fascinantes tout en profitant d'une promenade agr√©able. Vous traverserez diff√©rents enclos et zones du parc, tout en apprenant des faits int√©ressants sur la faune et les efforts de conservation du zoo. Installez-vous temporairement et laissez-vous guider √† travers ce voyage au c≈ìur de la nature.", 
             image: "/Assets/Service - Visite train.jpg" 
            },
        ];
        await Service.insertMany(servicesParDefaut);
        console.log('Services par d√©faut ajout√©s.');
      }
  
    } catch (error) {
      console.error(`‚ùå Erreur de connexion √† MongoDB : ${error.message}`);
      process.exit(1); // Terminer le processus si la connexion √©choue
    }
  };



// Cr√©er un mod√®le Mongoose pour les services
const serviceSchema = new mongoose.Schema({
  title: String,
  description: String,
  image: String // Nom de fichier de l'image
});

const Service = mongoose.models.Service || mongoose.model('Service', serviceSchema);

/*
// Cr√©er un mod√®le Mongoose pour les avis
const avisSchema = new mongoose.Schema({
  pseudo: String,
  comment: String,
});

const Avis = mongoose.models.Avis || mongoose.model('Avis', avisSchema);*/

export { connectDB, Service}
